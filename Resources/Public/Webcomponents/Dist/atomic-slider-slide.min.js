class AtomicSliderSlide extends HTMLElement{static get observedAttributes(){return["selected","status"]}constructor(){super(),this.selected="false",this.status="inactive",this.eventStatus=new CustomEvent("status"),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}attributeChangedCallback(t,e,n){e!==n&&this.render()}render(){this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          overflow: hidden;\n          height: auto;\n          opacity: 1;\n          min-height: 100px;\n          position: relative;\n          transition: opacity 1.5s ease-in-out;\n          width: 100%;\n        }\n\n        :host([selected="true"]) p {\n          opacity: 1;\n        }\n\n        ::slotted(*) {\n          position: relative;\n        }\n\n        :host figure {\n          position: relative;\n          display: grid;\n          grid-template-columns: var(--base-slider-slide-columns, 100%);\n          gap: var(--base-grid-gap, 0px);\n          margin-block-start: 0;\n          margin-block-end: 0;\n          margin-inline-start: 0px;\n          margin-inline-end: 0px;\n          margin: 0px;\n        }\n\n        :host {\n          position: relative;\n          top: 0;\n          left:0;\n          width: 100%;\n          display: none;\n          transition: all 0.5s;\n        }\n\n        :host([selected="true"]),\n        :host([next="true"]),\n        :host([previous="true"]) {\n          position: absolute;\n          width: 100%;\n          height: auto;\n          display: block;\n          visibility: hidden;\n          opacity: 0;\n        }\n\n        :host([mode="slide"][next="true"]) {\n          left: 100%;\n        }\n\n        :host([mode="slide"][previous="true"]) {\n          left: -100%;\n        }\n\n        :host([selected="true"]) {\n          left: 0;\n          position: relative;\n          visibility: visible;\n          opacity: 1;\n        }\n      </style>\n      <figure>\n        <slot></slot>\n      </figure>\n    ';let t=this.querySelectorAll("img");if(Object.entries(t).forEach(t=>{t[1].setAttribute("draggable","false"),t[1].style.width="100%"}),"true"===this.selected&&this.dispatchEvent(this.eventStatus),"true"===this.selected||"true"===this.next){let t=this.querySelectorAll("lazy-image");t.length>0&&t.forEach(t=>{console.log(t),t.setAttribute("initialised","")})}}}customElements.define("atomic-slider-slide",AtomicSliderSlide);