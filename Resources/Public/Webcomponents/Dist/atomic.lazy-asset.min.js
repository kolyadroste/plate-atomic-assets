class AtomicLazyAsset extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=`\n            <style>\n                :host {\n                    display:block;\n                    visibility: hidden !important;\n                    position: relative !important;\n                    z-index: -1 !important;\n                }\n                #area{\n                    display:block;\n                    position: absolute;\n                    top: -${this.loadBefore} !important;\n                    height: ${this.range} !important;\n                    width: 100% !important;\n                }\n            </style>\n            <div id="area"></div>\n        `}get type(){return this.getAttribute("type")?this.getAttribute("type"):"js"}get area(){return this.shadowRoot.querySelector("#area")}get loadBefore(){return this.getAttribute("load-before")?this.getAttribute("load-before"):"300px"}get range(){return this.getAttribute("range")?this.getAttribute("range"):"100vh"}get getSrc(){return"js"==this.type?this.getAttribute("src"):this.getAttribute("href")}get isFileLinked(){if("js"===this.type){return null!==document.querySelector(`script[src="${this.getSrc}"]`)}return null!==document.querySelector(`link[href="${this.getSrc}"]`)}connectedCallback(){this.observer=new IntersectionObserver(t=>{t.forEach(t=>{t.isIntersecting&&(this.loadCss(),this.observer.disconnect())})}),this.observer.observe(this.area)}loadCss(){if(this.isFileLinked)return;let t="";"js"===this.type?((t=document.createElement("script")).type="module",t.src=this.getSrc,t.async=!0):((t=document.createElement("link")).rel="stylesheet",t.href=this.getSrc,console.log(t)),t.addEventListener("load",()=>{this.dispatchEvent(new CustomEvent("script loaded",{bubbles:!0,composed:!0}))}),document.head.appendChild(t)}}customElements.define("a-lazy-asset",AtomicLazyAsset);