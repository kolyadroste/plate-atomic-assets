export default class AtomicEqualize extends HTMLElement{constructor(){super(),this.shadowDom=this.attachShadow({mode:"open"}),this.shadowDom.innerHTML="\n            <slot></slot>\n        ",this.initialized=!1,this.count=0,document.addEventListener("DOMContentLoaded",this.init(!0),{once:!0,passive:!0})}init(t){this.initialized=t,this.equalize(this.targets,this.type),this.targets?this.targets.forEach(t=>{new ResizeObserver(t=>{this.equalize(this.targets,this.type)}).observe(t)}):console.log("atomic-euqalize: couldnt find any targets")}static get observedAttributes(){return["target","config"]}get type(){return this.hasAttribute("type")?this.getAttribute("type").toString():"minHeight"}get selector(){return this.getAttribute("selector").toString()}get targets(){const t=this.querySelectorAll(this.selector);return t||console.error("atomic-equalizer cant find any targets"),t}equalize(t,e){if(t.forEach(t=>{t.style[e]="auto"}),"on"!==this.state)return;let i=this.getMaxVal(t,e);t.forEach(t=>{let s=t.offsetHeight;s!=i&&s<i&&(t.style[e]=i+"px")}),this.count++}get breakpoints(){return this.hasAttribute("breakpoints")?this.getAttribute("breakpoints"):null}get state(){let t="on";return this.parsedBreakpoints&&(t="off",this.parsedBreakpoints.forEach(e=>{e[0]<window.innerWidth&&"on"===e[1]&&(t="on"),e[0]<window.innerWidth&&"off"===e[1]&&(t="off")})),t}get parsedBreakpoints(){if(!this.breakpoints||""===this.breakpoints)return;const t=this.breakpoints.split(","),e=[];return t.forEach(t=>{const i=(t=t.split("::"))[0],s=t[1].includes("on")?"on":"off";e.push([i,s])}),e}getMaxVal(t,e){let i=0;return t.forEach(t=>{const e=t.offsetHeight;e>i&&(i=e)}),i}}void 0===customElements.get("atomic-equalize")&&customElements.define("atomic-equalize",AtomicEqualize);