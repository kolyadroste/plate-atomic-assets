class AtomicOffcanvas extends HTMLElement{static get observedAttributes(){return["openSelector","pos"]}_getAttributes(){this.currentButton=null,this.uuid=this.uuidv4(),this.offcanvasContent=null,this.pos=this.getAttribute("pos"),this.pageBody=document.querySelector("body"),this.openSelector=this.getAttribute("openSelector"),this.openSelector=this.openSelector?this.openSelector:"base-open-offcanvas",this.eventInitialized=new CustomEvent("initialized"),this.eventOpen=new CustomEvent("open"),this.eventClose=new CustomEvent("close")}constructor(){super(),this._getAttributes();this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n            <style>\n              \n          :host{\n            z-index:var(--atomic-offcanvas-zindex,99999);\n          }   \n          button {\n            width: 64px;\n            height: 64px;\n            border: none;\n            border-radius: 10px;\n            background-color: seagreen;\n            color: white;\n          }\n          #offcanvas-content{\n            z-index:99999;\n            box-sizing: border-box;\n            height:auto;\n            max-height:var(--atomic-offcanvas-height, 100vh);\n            min-height:var(--atomic-offcanvas-height, 100vh);\n            width: var(--atomic-offcanvas-width);\n            max-width:100%;\n            transition: transform 0.5s ease, -webkit-transform 0.5s ease;\n            background:var(--atomic-offcanvas-bg-color, white);\n            padding:var(--atomic-offcanvas-padding, 20px);\n            position: fixed;\n            left:0%;\n            transform: translateX(-100%);\n            top:0;\n            border-right:1px solid #eee;\n            overflow-x:hidden;\n            overflow-y:auto;\n            \n            box-shadow: 2px 2px 30px 7px rgba(0, 0, 0, 0.2);\n          }\n          :host([pos="top"]) #offcanvas-content{\n            transform: translateY(-100%);\n            width:100%;\n          }\n          :host([pos="top"][state="open"]) #offcanvas-content{\n            position: fixed;\n            opacity:1;\n            left:0;\n            top:0;\n            transform: translate(0, 0);\n          }\n          :host([pos="right"]) #offcanvas-content{\n            transform: translateX(100%);\n            left:auto !important;\n            right:0;\n            width:var(--atomic-offcanvas-width, 495px);\n          }\n          :host([pos="bottom"]) #offcanvas-content{\n            transform: translateY(100%);\n            top:auto;\n            bottom:0;\n            width:100%;\n          }\n          \n          :host([state="open"]) #offcanvas-content{\n            position: fixed;\n            opacity:1;\n            left:0;\n            top:0;\n            transform: translate(0, 0);\n          }\n\n          #overlay{\n            position:fixed;\n            z-index:99998;\n            top:0;\n            left:0;\n            opacity:0;\n            width:100%;\n            height:100%;\n            transition: opacity .5s ease-in-out;\n            background-color:rgba(0,0,0,0.1);\n            visibility:hidden;\n            \n          }\n          :host([state="open"]) #overlay{\n            visibility:visible;\n            opacity:1;\n          }\n        \n            </style>\n            \n            \n          <slot></slot>\n          <div id="overlay" part="overlay"></div>\n          <div id="offcanvas-content" part="offcanvas-content" aria-hidden="true">\n              <slot name="offcanvas-content"></slot>\n          </div>\n        \n        '}attributeChangedCallback(t,n,e){}firstUpdated(){this.offcanvasContent=this.shadowRoot.querySelector("#offcanvas-content"),this.buttons=this.querySelectorAll(this.openSelector),this.setAccessibility(),"true"===this.dataCloseOnEsc&&document.removeEventListener("keydown",this.handleEsc),Object.entries(this.buttons).forEach(t=>{t[1].addEventListener("click",t=>{let n=t.target;this._buttonClick.bind(this),this._buttonClick(n)})})}setAccessibility(){this.buttons=this.querySelectorAll(this.openSelector),this.buttons.length>0&&this.offcanvasContent.setAttribute("aria-labelledby",this.uuid),Object.entries(this.buttons).forEach(t=>{t[1].setAttribute("id",this.uuid)}),this.offcanvasContent.setAttribute("aria-hidden","false")}_handleClickOutside(t){if("overlay"===t.target.getAttribute("id")){if(this.close(),null===this.currentButton)return;this.currentButton.setAttribute("aria-expanded","false")}}open(){this.dispatchEvent(this.eventOpen),this.pageBody.style.overflowY="hidden",this.state="open",setTimeout(()=>{this.setAttribute("state","open")},300),this.shadowRoot.addEventListener("click",this._handleClickOutside.bind(this),!0),document.addEventListener("keydown",this._handleEsc.bind(this)),null!==this.currentButton&&this.currentButton.setAttribute("aria-expanded","true")}close(){this.offcanvasContent.setAttribute("aria-hidden","true"),this.dispatchEvent(this.eventClose),this.pageBody.style.overflowY="initial",this.state="closed",setTimeout(()=>{this.setAttribute("state","closed")},300),this.shadowRoot.removeEventListener("click",this._handleClickOutside.bind(this),!0)}_handleEsc(t){"Escape"===t.key&&(this.close(),null!==this.currentButton&&this.currentButton.setAttribute("aria-expanded","false"))}_buttonClick(t){this.currentButton=t,"closed"===this.state||void 0===this.state?(this.open(),this.currentButton.setAttribute("aria-expanded","true")):this.close()}connectedCallback(){this.dispatchEvent(this.eventInitialized),this.firstUpdated()}uuidv4(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=16*Math.random()|0;return("x"==t?n:3&n|8).toString(16)})}}customElements.define("atomic-offcanvas",AtomicOffcanvas);