export default class AtomicSlide extends HTMLElement{constructor(){super(),this.hasAttribute("inViewObjection")&&this._inViewObjection(),this.attachShadow({mode:"open"}),this.windowResizeObserver=new ResizeObserver(()=>{this.updateClassBasedOnWindowWidth()})}connectedCallback(){this.render(),this.windowResizeObserver.observe(document.body)}disconnectedCallback(){this.windowResizeObserver.unobserve(document.body)}_inViewObjection(){let e=this;new IntersectionObserver(function(t){t[0].intersectionRatio<=0||(e.setAttribute("gotIntoView","true"),e.dispatchEvent(new CustomEvent("atomic-slide.isInView",{cancelable:!1},!1)),this.disconnect())}).observe(this)}updateClassBasedOnWindowWidth(){-1*(this.getBoundingClientRect().width-window.innerWidth)<=40?(this.setAttribute("full-window",""),this.removeAttribute("containered")):(this.removeAttribute("full-window"),this.setAttribute("containered","")),console.log(this.getBoundingClientRect().width-window.innerWidth)}render(){this.shadowRoot.innerHTML=`\n      <style>\n\n        :host{\n            position: var(--atomic-slide--position, relative);\n            display: var(--atomic-slide--display, block);\n            transition: opacity 1.5s ease-in-out;\n            top: 0;\n            left:0;\n            width: 100%;\n        }\n        :host([previus="true"]),\n        :host([next="true"]){\n            position: absolute;\n            opacity: 1;\n            left: 0px;\n            width: 100%;\n        }\n\n        :host([selected="true"]){\n          position: relative;\n          width: 100%;\n          height: auto;\n          display: block;\n          visibility: visible;\n          opacity: 1;\n          left: 0;\n        }\n\n        :host([mode="slide"][next="true"]) {\n          left: 100%;\n        }\n\n        :host([mode="slide"][previous="true"]) {\n          left: -100%;\n        }\n        \n        figure{\n          position: relative;\n          display:block;\n          margin:0;\n          inset: 0;\n          min-height: var(--atomic-slide--min-height, 100px);\n        }\n    \n        .imageOverlay{\n            position: absolute;\n            width:100%;\n            height:100%;\n            z-index:1;\n        }\n\n        ::slotted([slot="image"]){\n            position: absolute;\n            width:100% !important;\n            height: 100% !important;\n            object-fit: cover;\n        }\n        :host([imageOverlay]) .imageOverlay{\n            background-color: var(--atomic-slide--image-overlay-color, black);\n            opacity: var(--atomic-slide--image-overlay-alpha,  0.3);\n        }\n  \n      </style>\n    <figure>\n        ${this.hasAttribute("imageOverlay")?'<div class="imageOverlay"></div>':""}\n        <slot name="image"></slot>\n        <slot></slot>\n    </figure>\n    `}}void 0===customElements.get("atomic-slide")&&customElements.define("atomic-slide",AtomicSlide);