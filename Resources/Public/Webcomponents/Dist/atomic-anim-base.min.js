const template=document.createElement("template");template.innerHTML='\n    <style>\n        :host{\n        --animate-duration:1s;\n        --animate-repeat:1;\n        animation-play-state:initial;\n        }\n        :host {\n            display:block;\n            animation-duration: var(--animate-duration);\n            animation-fill-mode: both;\n        }\n        :host([inline]){\n            display:inline-block;\n        }\n        :host([hideBeforeStart]) {\n            display:none;\n        }\n        :host([begin]){\n            display:block !important;\n        }\n        :host([inline][begin]) {\n            display:inline-block !important;\n        }\n        :host([invinite]) {\n            animation-iteration-count: infinite;\n        }\n        :host([repeat-1])  {\n            animation-iteration-count: var(--animate-repeat);\n        }\n        :host([repeat-2]){\n            animation-iteration-count: calc(var(--animate-repeat) * 2);\n        }\n        :host([repeat-3])  {\n            animation-iteration-count: calc(var(--animate-repeat) * 3);\n        }\n\n    </style>\n    <div anim-wrapper>\n        <slot></slot>\n    </div>\n    <slot name="events"></slot>\n';export default class AtomicAnimBase extends HTMLElement{constructor(){super(),this.shadowDom=this.attachShadow({mode:"closed"}),this.shadowDom.appendChild(template.content.cloneNode(!0)),this.hasAttribute("duration")&&this.style.setProperty("--animate-duration",this.getAttribute("duration")),this.hasAttribute("repeat")&&this.style.setProperty("--animate-repeat",this.getAttribute("repeat")),this.timeOut=null}connectedCallback(){this.hasAttribute("inViewStart")&&this._inViewObjection();let t=document.querySelector("body");if(0===t.length)return void console.error("the html document is invalid. Body-tag is missing");this.addEventListener("animationstart",e=>{e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation(),!1===t.hasAttribute("baseAnimIsPlaying")&&t.setAttribute("baseAnimIsPlaying",""),this.dispatchEvent(new CustomEvent("anim.started",{cancelable:!1},!1))}),this.addEventListener("animationend",e=>{e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation(),this.removeAttribute("begin"),t.removeAttribute("baseAnimIsPlaying"),this.setAttribute("ended",""),this.dispatchEvent(new CustomEvent("before.anim.ended",{cancelable:!1},!1)),setTimeout(()=>{this.dispatchEvent(new CustomEvent("anim.ended",{cancelable:!1},!1))},50)});let e=this._getEventConfig();this._listenEvents(e)}_getEventConfig(){const t=this.shadowDom.querySelector('slot[name="events"]').assignedNodes();if(t.length>0){var e;try{e=JSON.parse(t[0].innerHTML)}catch(t){return void this._throwError()}return e}}_listenEvents(t){"object"==typeof t&&t.forEach(t=>{t.event?this._listenEvent(t):this._throwError()})}_listenEvent(conf){if(null===conf.event.name||null===conf.event.target||null===conf.event.method)return void console.error("ERROR: Event config isn't wellformed");let targets=document.querySelectorAll(conf.event.target);if(null===targets||0===targets.length)return console.error("ERROR: Event target config cant find an object"),void console.log(conf);this.addEventListener(conf.event.name,event=>{event.preventDefault(),event.stopPropagation(),event.stopImmediatePropagation();let delay=conf.event.delay?conf.event.delay:50,method=conf.event.method;conf.event.consoleMessage&&console.info("message: "+conf.event.consoleMessage+", target: "+conf.event.target),targets.forEach((target,index)=>{void 0!==target[method]?"reset"===method?target[conf.event.method]():this.timeOut=setTimeout(function(){target[conf.event.method]()},eval(delay)):(console.error("Error: cant execute method"+conf.event.method+" on "+conf.event.target),console.log(target))})})}_throwError(){console.error("base-anim component has no valid config")}_inViewObjection(){let t=this;new IntersectionObserver(function(e){e[0].intersectionRatio<=0||(t.setAttribute("begin",""),this.disconnect())}).observe(this)}play(t=null){this.setAttribute("begin","")}reset(t=null){clearTimeout(this.timeOut),this.removeAttribute("ended"),this.removeAttribute("begin")}}