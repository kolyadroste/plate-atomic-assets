const styles="\n     :host{\n        --base-loadingbar--height:1px;\n        --base-loadingbar--target-width:100%;\n        position:relative;\n        display:block;\n        box-sizing: border-box;\n     }\n          \n     #line{\n        width: var(--base-loadingbar--target-width);\n        height: var(--base-loadingbar--height);\n        display:block;\n        background-color: white;\n     }\n     \n     @keyframes growWidth {\n          0% {\n              width: 0px;\n              visibility: visible;\n          }\n          100% {\n              width: var(--base-loadingbar--target-width);\n          }\n     }\n\n     :host([begin]) #line{\n        animation-duration: 1s;\n        animation-fill-mode: both;\n        animation-name: growWidth;\n        animation-timing-function: linear;\n        animation-iteration-count: 1;\n     }     \n     #timer{\n        display:none;\n     }\n     \n     :host([showTimer]){\n         padding-right:30px;\n     }\n     :host([showTimer]) #timer{\n        position: absolute;\n        right:0;\n        border:solid 1px white;\n        height:10px;\n        width:10px;\n        display:flex;\n        align-content:center;\n        justify-content: center;\n        align-items: center;\n        font-family:arial;\n        font-size: 12px;\n        line-height:6px;\n        border-radius: 50%;\n        transform: translateY(-50%);\n\n        padding:5px;\n     }\n";export default class AtomicLoadingbar extends HTMLElement{constructor(){super(),this.shadowDom=this.attachShadow({mode:"open"}),this.time=this.getAttribute("time")||"5000",this.seconds=null,this.timerInterval=null,this.timer=null,this.countHidden=""}template(){return`\n            <style>${styles}</style>\n            <style>\n                :host([begin]) #line{\n                    animation-duration: ${this.time?this.time+"ms":"5s"};\n                }\n            </style>\n            <div id="line"></div>\n            <div id="timer">${this.count}</div>\n        `}connectedCallback(){this.render()}static get observedAttributes(){return["time"]}attributeChangedCallback(t,i,n){switch(t){case"time":this.time=n,this.restart()}}render(){this.shadowDom.innerHTML=this.template({}),this.shadowDom.querySelector("#line").addEventListener("animationstart",this.beginTimer.bind(this)),this.timer=this.shadowDom.querySelector("#timer")}_parseTimeStringToMilliSeconds(t){var i=1e3;return 1===this.time.search("ms")&&(i=t.substring(0,t.length-2),i/=1e3),1===this.time.search("s")&&(i=t.substring(0,t.length-1)),i}beginTimer(){this.endTimer();var t=this._parseTimeStringToMilliSeconds(this.time);this.count=t-1,this.timer.innerText=this.count,this.timerInterval=setInterval(()=>{this.count-=1,0===this.count&&this.endTimer(),this.timer.innerText=this.count},1e3)}restart(){this.render(),this.beginTimer()}endTimer(){clearInterval(this.timerInterval),this.count=0}}void 0===customElements.get("atomic-loadingbar")&&customElements.define("atomic-loadingbar",AtomicLoadingbar);